"""
Django settings for chicago project.

Generated by 'django-admin startproject' using Django 1.10.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os
import local_settings

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


def get_local(attr_name, default_value=None):
    if hasattr(local_settings, attr_name):
        return getattr(local_settings, attr_name)
    return default_value


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '2=+yh8nf%w0wr7a*%ka1ebw$w%ajq1eumis1pbx()7ffn*(20$'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = get_local("DEBUG", False)

ALLOWED_HOSTS = ['localhost', '192.169.167.3', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',

    'django_social_share',
    'social_django',
    'social_core',
    'smart_selects',
    'redactor',
    'bootstrap3',

    'authenticate',
    'app',
    'advertisement',
    'articles',
    'podcast',
    'manager',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'app.middleware.AfterMiddleware',
]

ROOT_URLCONF = 'chicago.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                'social_django.context_processors.login_redirect',
                'social_django.context_processors.backends',
            ],
        },
    },
]

WSGI_APPLICATION = 'chicago.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'chicago',
        'USER': 'chicago',
        'PASSWORD': 'Chicago123;',
        'HOST': 'localhost',
        'PORT': '',
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

#LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'mn'

TIME_ZONE = 'Asia/Ulaanbaatar'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Datetime format
DATETIME_FORMAT = 'Y-m-d, H:i'

# Date format
DATE_FORMAT = 'Y-m-d'

# Time format
TIME_FORMAT = 'H:i'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)
STATIC_ROOT = os.path.join(BASE_DIR, "..", "static")

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


LOGIN_URL = 'login'
LOGOUT_URL = 'logout'
LOGIN_REDIRECT_URL = 'app-home'
LOGOUT_REDIRECT_URL = 'login'


LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)



AUTHENTICATION_BACKENDS = (
    'social_core.backends.github.GithubOAuth2',
    'social_core.backends.twitter.TwitterOAuth',
    'social_core.backends.facebook.FacebookOAuth2',
    'social_core.backends.google.GoogleOAuth2',

    'django.contrib.auth.backends.ModelBackend',
)


SOCIAL_AUTH_GITHUB_KEY = '2016480e720e2c7f32a2'
SOCIAL_AUTH_GITHUB_SECRET = 'bc732abfdd198659d9372170dabb9f54e3831a4b'


SOCIAL_AUTH_TWITTER_KEY = 'JseMzWqsityerdurepQXggDnm'
SOCIAL_AUTH_TWITTER_SECRET = 'Har3xd9wNj3qbtLdmW7SokdVbMxMWV2wP3DpFvX5kqOM7QaWSQ'


SOCIAL_AUTH_FACEBOOK_KEY = '260546951059629'
SOCIAL_AUTH_FACEBOOK_SECRET = 'ed3e4f9325bdc666eb1eda5e8c4f5b2a'


SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '81131997079-e3uk7u0k8ntm3pb146rddu7bf5be714f'
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = 'R6m9Kd7IumHaZ4JE5ys5zuBF'


SOCIAL_AUTH_LOGIN_ERROR_URL = 'app-home'
SOCIAL_AUTH_LOGIN_REDIRECT_URL = 'app-home'
SOCIAL_AUTH_RAISE_EXCEPTIONS = False


SOCIAL_AUTH_PIPELINE = (
    # Get the information we can about the user and return it in a simple
    # format to create the user instance later. On some cases the details are
    # already part of the auth response from the provider, but sometimes this
    # could hit a provider API.
    'social_core.pipeline.social_auth.social_details',

    # Get the social uid from whichever service we're authing thru. The uid is
    # the unique identifier of the given user in the provider.
    'social_core.pipeline.social_auth.social_uid',

    # Verifies that the current auth process is valid within the current
    # project, this is where emails and domains whitelists are applied (if
    # defined).
    'social_core.pipeline.social_auth.auth_allowed',

    # Checks if the current social-account is already associated in the site.
    'social_core.pipeline.social_auth.social_user',

    # Make up a username for this person, appends a random string at the end if
    # there's any collision.
    'social_core.pipeline.user.get_username',

    # Send a validation email to the user to verify its email address.
    # 'social_core.pipeline.mail.mail_validation',

    # Associates the current social details with another user account with
    # a similar email address.
    # 'social_core.pipeline.social_auth.associate_by_email',

    # Create a user account if we haven't found one yet.
    'social_core.pipeline.user.create_user',

    # Create the record that associated the social account with this user.
    'social_core.pipeline.social_auth.associate_user',

    # Populate the extra_data field in the social record with the values
    # specified by settings (and the default ones like access_token, etc).
    'social_core.pipeline.social_auth.load_extra_data',

    # Update the user record with any changed info from the auth service.
    'social_core.pipeline.user.user_details',

    #'chicago.pipeline.save_profile_picture',
    'chicago.pipeline.save_profile_picture',
)


BOOTSTRAP3 = {

    #'set_required': False,

    #'horizontal_label_class': 'col-lg-3',

    #'horizontal_field_class': 'col-lg-9',

    'set_placeholder': False,

    #'success_css_class': 'success',

}


EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'mongolschicago@gmail.com'
EMAIL_HOST_PASSWORD = 'zrnlbyvpcghthmqb'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'


REDACTOR_OPTIONS = {'lang': 'en', 'plugins': ['table'], 'imageResizable': True, 'imagePosition': True}
REDACTOR_UPLOAD = 'uploads/'